import "SDL.h";

// TODO: This shouldn't be necessary?
struct SDL_Renderer {}

SDL_Renderer*? renderer = null;

void renderLevel(Level* level)
{
    SDL_SetRenderDrawColor(renderer, 0xcc, 0xcc, 0xcc, 0xff);
    SDL_RenderFillRect(renderer, null);

    for (var object in level.objects)
    {
        SDL_Rect rect = undefined;
        rect.x = int(object.renderPos.x * tileSize);
        rect.y = int(object.renderPos.y * tileSize);
        rect.w = tileSize;
        rect.h = tileSize;

        switch (object.type)
        {
            case Tile.WallTile:
                SDL_SetRenderDrawColor(renderer, 0x66, 0x66, 0x66, 0xff);
                SDL_RenderFillRect(renderer, &rect);

            case Tile.BoxTile:
                SDL_SetRenderDrawColor(renderer, 0x44, 0x44, 0x44, 0xff);
                SDL_RenderFillRect(renderer, &rect);
                rect.x += 1;
                rect.y += 1;
                rect.w -= 2;
                rect.h -= 2;
                SDL_SetRenderDrawColor(renderer, 0x55, 0x55, 0x55, 0xff);
                SDL_RenderFillRect(renderer, &rect);

            case Tile.Player:
                SDL_SetRenderDrawColor(renderer, 0x33, 0x33, 0x33, 0xff);
                rect.x += tileSize / 4;
                rect.y += tileSize / 4;
                rect.w /= 2;
                rect.h -= tileSize / 4;
                SDL_RenderFillRect(renderer, &rect);
        }
    }

    SDL_Point mouse = undefined;
    SDL_GetMouseState(&mouse.x, &mouse.y);
    SDL_Rect rect = undefined;
    rect.x = mouse.x / scale / tileSize * tileSize;
    rect.y = mouse.y / scale / tileSize * tileSize;
    rect.w = tileSize;
    rect.h = tileSize;
    SDL_SetRenderDrawColor(renderer, 0x00, 0xff, 0x00, 0xff);
    SDL_RenderDrawRect(renderer, &rect);
}
