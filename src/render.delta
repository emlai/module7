import "SDL.h";

// TODO: This shouldn't be necessary?
struct SDL_Renderer {}

SDL_Renderer*? renderer = null;

const tileSize = 20;
const playerSize = tileSize / 2;
const wallThickness = tileSize / 5;

void renderTile(Object* object, Directions directions, uint8 wallColor, uint8 floorColor)
{
    SDL_Rect rect = undefined;
    rect.x = int(object.renderPos.x * tileSize);
    rect.y = int(object.renderPos.y * tileSize);
    rect.w = tileSize;
    rect.h = tileSize;

    SDL_SetRenderDrawColor(renderer, wallColor, wallColor, wallColor, 0xff);
    SDL_RenderFillRect(renderer, &rect);
    SDL_SetRenderDrawColor(renderer, floorColor, floorColor, floorColor, 0xff);

    if (directions.north)
    {
        SDL_Rect northRect = undefined;
        northRect.x = rect.x + wallThickness;
        northRect.y = rect.y;
        northRect.w = rect.w - wallThickness * 2;
        northRect.h = rect.h - wallThickness;
        SDL_RenderFillRect(renderer, &northRect);
    }

    if (directions.east)
    {
        SDL_Rect eastRect = undefined;
        eastRect.x = rect.x + wallThickness;
        eastRect.y = rect.y + wallThickness;
        eastRect.w = rect.w - wallThickness;
        eastRect.h = rect.h - wallThickness * 2;
        SDL_RenderFillRect(renderer, &eastRect);
    }

    if (directions.south)
    {
        SDL_Rect southRect = undefined;
        southRect.x = rect.x + wallThickness;
        southRect.y = rect.y + wallThickness;
        southRect.w = rect.w - wallThickness * 2;
        southRect.h = rect.h - wallThickness;
        SDL_RenderFillRect(renderer, &southRect);
    }

    if (directions.west)
    {
        SDL_Rect westRect = undefined;
        westRect.x = rect.x;
        westRect.y = rect.y + wallThickness;
        westRect.w = rect.w - wallThickness;
        westRect.h = rect.h - wallThickness * 2;
        SDL_RenderFillRect(renderer, &westRect);
    }
}

void renderLevel(Level* level)
{
    SDL_SetRenderDrawColor(renderer, 0xcc, 0xcc, 0xcc, 0xff);
    SDL_RenderFillRect(renderer, null);

    for (var object in level.objects)
    {
        switch (object.type)
        {
            case ObjectType.Tile as tile:
                renderTile(object, tile.directions, tile.movable ? 0x55 : 0x66, tile.movable ? 0xaa : 0xcc);
        }
    }

    for (var object in level.objects)
    {
        if (object.type == ObjectType.Player)
        {
            SDL_SetRenderDrawColor(renderer, 0x33, 0x33, 0x33, 0xff);
            SDL_Rect rect = undefined;
            rect.x = int(object.renderPos.x * tileSize) + playerSize / 2;
            rect.y = int(object.renderPos.y * tileSize) + playerSize / 2;
            rect.w = playerSize;
            rect.h = playerSize;
            SDL_RenderFillRect(renderer, &rect);
        }
    }

    SDL_Point mouse = undefined;
    SDL_GetMouseState(&mouse.x, &mouse.y);
    SDL_Rect rect = undefined;
    rect.x = mouse.x / scale / tileSize * tileSize;
    rect.y = mouse.y / scale / tileSize * tileSize;
    rect.w = tileSize;
    rect.h = tileSize;
    SDL_SetRenderDrawColor(renderer, 0x00, 0xff, 0x00, 0xff);
    SDL_RenderDrawRect(renderer, &rect);
}
