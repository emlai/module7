import "math.h";

struct ivec2: Copyable
{
    int x;
    int y;

    init(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
}

struct vec2: Copyable
{
    float x;
    float y;

    init(float x, float y)
    {
        this.x = x;
        this.y = y;
    }

    init(ivec2 v)
    {
        this.x = float(v.x);
        this.y = float(v.y);
    }

    float length()
    {
        return sqrtf(x * x + y * y);
    }
}

T operator+<T>(T a, T b)
{
    return T(a.x + b.x, a.y + b.y);
}

T operator-<T>(T a, T b)
{
    return T(a.x - b.x, a.y - b.y);
}

T operator*<T, U>(T a, U b)
{
    return T(a.x * b, a.y * b);
}

T operator/<T, U>(T a, U b)
{
    return T(a.x / b, a.y / b);
}

bool operator==<T>(T a, T b)
{
    return a.x == b.x && a.y == b.y;
}

bool operator!=<T>(T a, T b)
{
    return a.x != b.x || a.y != b.y;
}
