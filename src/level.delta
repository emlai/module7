struct Directions
{
    bool north;
    bool east;
    bool south;
    bool west;
}

enum ObjectType
{
    Tile(Directions directions, bool movable),
    Player
}

struct Object
{
    ObjectType type;
    ivec2 pos;
    vec2 renderPos;

    init(ObjectType type, ivec2 pos)
    {
        this.type = type;
        this.pos = pos;
        this.renderPos = vec2(pos);
    }

    bool isPlayer()
    {
        return type == ObjectType.Player;
    }
}

struct Level
{
    List<Object> objects;

    init(ivec2 size)
    {
        objects = List<Object>();
        setObject(size / 2, ObjectType.Player);
    }

    void setObject(ivec2 pos, ObjectType type)
    {
        removeObject(pos);
        objects.push(Object(type, pos));
    }

    void removeObject(ivec2 pos)
    {
        for (var object in objects.enumerate())
        {
            if (object.value.pos == pos)
            {
                objects.removeAt(object.index);
                break;
            }
        }
    }

    Object*? getObject(ivec2 pos)
    {
        for (var object in objects)
        {
            if (object.pos == pos)
                return object;
        }

        return null;
    }

    Object*? getTile(ivec2 pos)
    {
        for (var object in objects)
        {
            if (object.pos == pos && object.type == ObjectType.Tile)
                return object;
        }

        return null;
    }
}
