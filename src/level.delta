const tileSize = 16;

struct Directions
{
    bool north;
    bool east;
    bool south;
    bool west;

    init(bool north, bool east, bool south, bool west)
    {
        this.north = north;
        this.east = east;
        this.south = south;
        this.west = west;
    }
}

enum Tile
{
    Movable(Directions directions),
    NonMovable(Directions directions),
    Player
}

struct Object
{
    Tile type;
    ivec2 pos;
    vec2 renderPos;

    init(Tile type, ivec2 pos)
    {
        this.type = type;
        this.pos = pos;
        this.renderPos = vec2(pos);
    }
}

struct Level
{
    List<Object> objects;

    init(ivec2 size)
    {
        objects = List<Object>();
        setObject(size / 2, Tile.Player);
    }

    void setObject(ivec2 pos, Tile type)
    {
        removeObject(pos);
        objects.push(Object(type, pos));
    }

    void removeObject(ivec2 pos)
    {
        // TODO: Use List.removeFirst once lambda captures are implemented.
        for (var object in objects.enumerate())
        {
            if (object.value.pos == pos)
            {
                objects.removeAt(object.index);
                break;
            }
        }
    }

    Object*? getTile(ivec2 pos)
    {
        // TODO: Use List.find once lambda captures are implemented.
        for (var object in objects)
        {
            if (object.pos == pos)
                return object;
        }

        return null;
    }
}
