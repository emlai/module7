const tileSize = 16;

enum Tile
{
    WallTile,
    BoxTile,
    Player
}

struct Object
{
    Tile type;
    ivec2 pos;
    vec2 renderPos;

    init(Tile type, ivec2 pos)
    {
        this.type = type;
        this.pos = pos;
        this.renderPos = vec2(pos);
    }
}

struct Level
{
    List<Object> objects;

    init(ivec2 size)
    {
        objects = List<Object>();

        for (var x in 0..size.x)
        {
            for (var y in 0..size.y)
            {
                addObject(ivec2(x, y), Tile.WallTile);
            }
        }

        addObject(ivec2(0, 0), Tile.Player);
    }

    void addObject(ivec2 pos, Tile type)
    {
        if (getTile(pos))
            return;

        objects.push(Object(type, pos));
    }

    void removeObject(ivec2 pos)
    {
        // TODO: Use List.removeFirst once lambda captures are implemented.
        for (var object in objects.enumerate())
        {
            if (object.value.pos == pos)
            {
                objects.removeAt(object.index);
                break;
            }
        }
    }

    Object*? getTile(ivec2 pos)
    {
        // TODO: Use List.find once lambda captures are implemented.
        for (var object in objects)
        {
            if (object.pos == pos)
                return object;
        }

        return null;
    }
}
