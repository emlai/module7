import "SDL.h";

const width = 640;
const height = 480;
const scale = 2;
const objectSpeed = 10;

struct GameState
{
    Level level;
    Tile brush;
    Directions brushDirections;
    ivec2 lastClickedPos;

    init(ivec2 levelSize)
    {
        level = Level(levelSize);
        brushDirections = Directions(false, false, false, false);
        brush = Tile.NonMovable(brushDirections);
        lastClickedPos = ivec2(-1, -1);
    }
}

bool canMove(ivec2 dir, Directions directions)
{
    if (dir == ivec2(1, 0) && directions.west)
        return true;

    if (dir == ivec2(-1, 0) && directions.east)
        return true;

    if (dir == ivec2(0, 1) && directions.north)
        return true;

    if (dir == ivec2(0, -1) && directions.south)
        return true;

    return false;
}

bool attemptMove(Level* level, Object* mover, ivec2 dir)
{
    var pos = mover.pos + dir;
    var object = level.getTile(pos);

    if (!object)
        return true;

    switch (object!.type)
    {
        case Tile.NonMovable as tile:
            return canMove(dir, tile.directions);

        case Tile.Movable as tile:
            if (canMove(dir, tile.directions))
                return true;

            if (attemptMove(level, object!, dir))
            {
                object!.pos = pos + dir;
                return true;
            }

            return false;

        case Tile.Player:
            return false;
    }

    assert(false);
    return true;
}

void update(GameState* state, uint8[?]* keyboardState, float deltaTime)
{
    var level = &state.level;
    var left = keyboardState[SDL_SCANCODE_LEFT] != 0;
    var right = keyboardState[SDL_SCANCODE_RIGHT] != 0;
    var up = keyboardState[SDL_SCANCODE_UP] != 0;
    var down = keyboardState[SDL_SCANCODE_DOWN] != 0;

    for (var object in state.level.objects)
    {
        if (object.type == Tile.Player)
        {
            if (left && !right && !up && !down && float(object.pos.x) >= object.renderPos.x && attemptMove(level, &object, ivec2(-1, 0)))
                object.pos.x--;

            if (!left && right && !up && !down && float(object.pos.x) <= object.renderPos.x && attemptMove(level, &object, ivec2(1, 0)))
                object.pos.x++;

            if (!left && !right && up && !down && float(object.pos.y) >= object.renderPos.y && attemptMove(level, &object, ivec2(0, -1)))
                object.pos.y--;

            if (!left && !right && !up && down && float(object.pos.y) <= object.renderPos.y && attemptMove(level, &object, ivec2(0, 1)))
                object.pos.y++;
        }

        object.renderPos = moveTowards(object.renderPos, vec2(object.pos), objectSpeed * deltaTime);
    }

    ivec2 mousePos = undefined;
    var buttons = SDL_GetMouseState(&mousePos.x, &mousePos.y);
    var clickedTilePos = mousePos / scale / tileSize;

    if ((buttons & SDL_BUTTON(SDL_BUTTON_LEFT)) != 0)
    {
        if (state.lastClickedPos != clickedTilePos)
        {
            level.setObject(clickedTilePos, state.brush);
            state.lastClickedPos = clickedTilePos;
        }
    }
    else if ((buttons & SDL_BUTTON(SDL_BUTTON_RIGHT)) != 0)
    {
        if (state.lastClickedPos != clickedTilePos)
        {
            level.removeObject(clickedTilePos);
            state.lastClickedPos = clickedTilePos;
        }
    }
    else
    {
        state.lastClickedPos = ivec2(-1, -1);
    }
}

int main()
{
    if (SDL_Init(SDL_INIT_VIDEO) != 0)
    {
        SDL_Log("Cannot initialize SDL: %s", SDL_GetError());
        return 1;
    }

    var window = SDL_CreateWindow("Module7", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width * scale, height * scale, 0);
    if (!window)
    {
        SDL_Log("Cannot create window: %s", SDL_GetError());
        return 1;
    }

    renderer = SDL_CreateRenderer(window, -1, 0);
    if (!renderer)
    {
        SDL_Log("Cannot create renderer: %s", SDL_GetError());
        return 1;
    }

    SDL_RenderSetLogicalSize(renderer, width, height);

    SDL_Event event = undefined;
    var keyboardState = cast<const uint8[?]*>(SDL_GetKeyboardState(null)!);
    var running = true;
    uint64 previousTime = 0;
    uint64 currentTime = 0;

    var levelSize = ivec2(width / tileSize, height / tileSize);
    var state = GameState(levelSize);

    while (running)
    {
        previousTime = currentTime;
        currentTime = SDL_GetPerformanceCounter();
        var deltaTime = float(currentTime - previousTime) / float(SDL_GetPerformanceFrequency());

        while (SDL_PollEvent(event) != 0)
        {
            switch (event.type)
            {
                case SDL_KEYDOWN:
                    switch (event.key.keysym.sym)
                    {
                        case SDLK_1:
                            state.brush = Tile.Player;
                        case SDLK_2:
                            state.brush = Tile.NonMovable(Directions(false, false, false, false));
                        case SDLK_3:
                            state.brush = Tile.Movable(Directions(false, false, false, false));
                        case SDLK_w:
                            state.brushDirections.north = !state.brushDirections.north;
                            updateBrushDirections(state);
                        case SDLK_a:
                            state.brushDirections.west = !state.brushDirections.west;
                            updateBrushDirections(state);
                        case SDLK_s:
                            state.brushDirections.south = !state.brushDirections.south;
                            updateBrushDirections(state);
                        case SDLK_d:
                            state.brushDirections.east = !state.brushDirections.east;
                            updateBrushDirections(state);
                        case SDLK_ESCAPE:
                            running = false;
                    }
                case SDL_QUIT:
                    running = false;
            }
        }

        SDL_RenderClear(renderer);
        renderLevel(state.level);
        SDL_RenderPresent(renderer);

        update(&state, keyboardState, deltaTime);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}

void updateBrushDirections(GameState* state)
{
    switch (state.brush)
    {
        case Tile.NonMovable as tile:
            tile.directions = state.brushDirections;
        case Tile.Movable as tile:
            tile.directions = state.brushDirections;
    }
}
